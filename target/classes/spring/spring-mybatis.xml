<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-4.0.xsd
                        http://www.springframework.org/schema/tx 
                        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
                        http://www.springframework.org/schema/aop 
                        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">                       
    <!-- 自动扫描 -->
    <context:component-scan base-package="com.mayabc" />

    <!-- 以静态变量保存ApplicationContext -->
	<bean id="springContextHolder" class="com.mayabc.plan.util.SpringContextHolder" />
	
    <!-- 引入配置文件 -->
    <bean id="propertyConfigurer"
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="location" value="classpath:conf/db.properties" />
    </bean>
	
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close" >
          <property name="driverClassName" value="${db.driver}" />
          <property name="url" value="${db.url}" />  
          <property name="username" value="${db.username}" />  
          <property name="password" value="${db.password}" />     
          <property name="filters" value="stat" /> <!-- 监控sql语句和请求状态 -->
          <!-- 连接池启动时的初始值 -->
		  <property name="initialSize" value="${initialSize}" />
		  <!-- 连接池的最大值 -->
		  <property name="maxActive" value="${maxActive}" />
		  <!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
		  <property name="maxWait" value="${maxWait}" />
		  <!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
		  <property name="minIdle" value="${minIdle}" />
		  <property name="timeBetweenEvictionRunsMillis" value="3000" />  
          <property name="minEvictableIdleTimeMillis" value="300000" />
		  <!--#给出一条简单的sql语句进行验证-->
		  <property name="validationQuery" value="SELECT SYSDATE()" />
		  <!--#在取出连接时进行有效验证-->
		  <property name="testOnBorrow" value="true" />
		  <property name="testOnReturn" value="false" /> 
		  <property name="poolPreparedStatements" value="true" />  
          <property name="maxPoolPreparedStatementPerConnectionSize" value="40" /> <!-- Statement缓存大小 --> 
    </bean>
     
    <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:com/mayabc/plan/persistence/mapper/*.xml"></property>
    </bean>

    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
        <property name="basePackage" value="com.mayabc.plan.persistence.dao" />        
    </bean>

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager"  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    
    <!-- 注解方式配置事物 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
	 
	<!-- 配置druid监控spring jdbc  -->
	<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"></bean>
	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
		<property name="patterns">
			<list>
				<value>com.mayabc.plan.persistence.dao.*</value>
			</list>
		</property>
	</bean>
	<aop:config>
		<aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
	</aop:config>

    <import resource="localhost.xml" /> 
</beans>